var ObstacleManagerEvent={ADDED:"obstacle added",REMOVED:"obstacle removed"};class ObstacleManager extends EventObject{constructor(){super(),this.mainCar=new MainCar,this._obstacles=[]}_createObstacleName(){var e=new Set;for(var t of this._obstacles){if(0==t.name.indexOf("obstacle-")){var s=Number(t.name.substring(9));0==isNaN(s)&&e.add(s)}}for(var a=0;;a++)if(!e.has(a))return"obstacle-"+a}getMainCar(){return this.mainCar}getObstacles(){return this._obstacles}getObstacle(e){return this._obstacles[e]}getObstacleCount(){return this._obstacles.length}getObstacleIndex(e){for(var t=0;t<this._obstacles.length;t++)if(this._obstacles[t]==e)return t;return-1}addDefaultObstacle(e){var t=new Obstacle;return t.type=e,t.name=this._createObstacleName(),t.route=new Route,this.addObstacle(t),t}addObstacle(e){this._obstacles.push(e);var t=this._obstacles.length-1;this.sendEvent(ObstacleManagerEvent.ADDED,e,t)}removeObstacle(e){var t=this.getObstacleIndex(e);this._obstacles.splice(t,1),this.sendEvent(ObstacleManagerEvent.REMOVED,e,t)}clear(){for(var e=this._obstacles.length-1;e>=0;e--)this.removeObstacle(this._obstacles[e])}toJson(){var e=[];for(var t of this._obstacles)e.push(t.toJson());return{obstacles:e,mainCar:this.mainCar.toJson()}}}